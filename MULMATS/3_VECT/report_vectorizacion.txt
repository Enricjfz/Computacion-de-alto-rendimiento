Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 19.1.2.254 Build 20200623

Compiler options: -O3 -qopt-report=4 -qopt-report-phase=VEC,LOOP -qopt-report-file=prueba1.txt -c -o mmat_ikj_O3

Begin optimization report for: main(int, char **)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at mmat-ikj.c(16,5) inlined into mmat-ikj.c(87,5)
   remark #15527: loop was not vectorized: function call to rand(void) cannot be vectorized   [ mmat-ikj.c(17,13) ]
LOOP END

LOOP BEGIN at mmat-ikj.c(16,5) inlined into mmat-ikj.c(88,5)
   remark #15527: loop was not vectorized: function call to rand(void) cannot be vectorized   [ mmat-ikj.c(17,13) ]
LOOP END

LOOP BEGIN at mmat-ikj.c(30,6) inlined into mmat-ikj.c(93,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mmat-ikj.c(31,8) inlined into mmat-ikj.c(93,5)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mmat-ikj.c(31,8) inlined into mmat-ikj.c(93,5)
         remark #15389: vectorization support: reference C[i*C2+j] has unaligned access   [ mmat-ikj.c(32,12) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4
         remark #15477: vector cost: 1.250
         remark #15478: estimated potential speedup: 2.900
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at mmat-ikj.c(31,8) inlined into mmat-ikj.c(93,5)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mmat-ikj.c(34,6) inlined into mmat-ikj.c(93,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mmat-ikj.c(35,9) inlined into mmat-ikj.c(93,5)
      remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mmat-ikj.c(37,11) inlined into mmat-ikj.c(93,5)
      <Peeled loop for vectorization>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at mmat-ikj.c(37,11) inlined into mmat-ikj.c(93,5)
         remark #15388: vectorization support: reference C[i*C2+j] has aligned access   [ mmat-ikj.c(38,16) ]
         remark #15388: vectorization support: reference C[i*C2+j] has aligned access   [ mmat-ikj.c(38,16) ]
         remark #15389: vectorization support: reference B[k*C2+j] has unaligned access   [ mmat-ikj.c(38,32) ]
         remark #15388: vectorization support: reference C[i*C2+j] has aligned access   [ mmat-ikj.c(38,16) ]
         remark #15388: vectorization support: reference C[i*C2+j] has aligned access   [ mmat-ikj.c(38,16) ]
         remark #15388: vectorization support: reference B[k*C2+j] has aligned access   [ mmat-ikj.c(38,32) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.676
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 2
         remark #15449: unmasked aligned unit stride stores: 2
         remark #15450: unmasked unaligned unit stride loads: 1
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 19
         remark #15477: vector cost: 4.250
         remark #15478: estimated potential speedup: 4.200
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
      LOOP END

      LOOP BEGIN at mmat-ikj.c(37,11) inlined into mmat-ikj.c(93,5)
      <Alternate Alignment Vectorized Loop>
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 4
      LOOP END

      LOOP BEGIN at mmat-ikj.c(37,11) inlined into mmat-ikj.c(93,5)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference C[i*C2+j] has aligned access   [ mmat-ikj.c(38,16) ]
         remark #15388: vectorization support: reference C[i*C2+j] has aligned access   [ mmat-ikj.c(38,16) ]
         remark #15389: vectorization support: reference B[k*C2+j] has unaligned access   [ mmat-ikj.c(38,32) ]
         remark #15388: vectorization support: reference C[i*C2+j] has aligned access   [ mmat-ikj.c(38,16) ]
         remark #15388: vectorization support: reference C[i*C2+j] has aligned access   [ mmat-ikj.c(38,16) ]
         remark #15389: vectorization support: reference B[k*C2+j] has unaligned access   [ mmat-ikj.c(38,32) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.733
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 2
         remark #15449: unmasked aligned unit stride stores: 1
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 10
         remark #15477: vector cost: 2.000
         remark #15478: estimated potential speedup: 4.620
         remark #15488: --- end vector cost summary ---
         remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
      LOOP END

      LOOP BEGIN at mmat-ikj.c(37,11) inlined into mmat-ikj.c(93,5)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at mmat-ikj.c(35,9) inlined into mmat-ikj.c(93,5)
   <Remainder>
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mmat-ikj.c(37,11) inlined into mmat-ikj.c(93,5)
      <Peeled loop for vectorization>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at mmat-ikj.c(37,11) inlined into mmat-ikj.c(93,5)
         remark #15388: vectorization support: reference C[i*C2+j] has aligned access   [ mmat-ikj.c(38,16) ]
         remark #15388: vectorization support: reference C[i*C2+j] has aligned access   [ mmat-ikj.c(38,16) ]
         remark #15388: vectorization support: reference B[k*C2+j] has aligned access   [ mmat-ikj.c(38,32) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 1.062
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 2
         remark #15449: unmasked aligned unit stride stores: 1
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 10
         remark #15477: vector cost: 2.000
         remark #15478: estimated potential speedup: 4.620
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at mmat-ikj.c(37,11) inlined into mmat-ikj.c(93,5)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at mmat-ikj.c(37,11) inlined into mmat-ikj.c(93,5)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference C[i*C2+j] has aligned access   [ mmat-ikj.c(38,16) ]
         remark #15388: vectorization support: reference C[i*C2+j] has aligned access   [ mmat-ikj.c(38,16) ]
         remark #15389: vectorization support: reference B[k*C2+j] has unaligned access   [ mmat-ikj.c(38,32) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.067
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 2
         remark #15449: unmasked aligned unit stride stores: 1
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 10
         remark #15477: vector cost: 2.000
         remark #15478: estimated potential speedup: 4.620
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at mmat-ikj.c(37,11) inlined into mmat-ikj.c(93,5)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: inicializarMatrizRandom(float *, int, int)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at mmat-ikj.c(16,5)
   remark #15527: loop was not vectorized: function call to rand(void) cannot be vectorized   [ mmat-ikj.c(17,13) ]
LOOP END
===========================================================================

Begin optimization report for: Mult(float *, float *, float *, int, int, int)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at mmat-ikj.c(30,6)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mmat-ikj.c(31,8)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mmat-ikj.c(31,8)
         remark #15389: vectorization support: reference C[i*cB+j] has unaligned access   [ mmat-ikj.c(32,12) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 0.300
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 4
         remark #15477: vector cost: 1.250
         remark #15478: estimated potential speedup: 2.900
         remark #15488: --- end vector cost summary ---
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at mmat-ikj.c(31,8)
      <Remainder loop for vectorization>
         remark #25015: Estimate of max trip count of loop=24
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mmat-ikj.c(34,6)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mmat-ikj.c(35,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mmat-ikj.c(37,11)
      <Peeled loop for vectorization, Multiversioned v1>
         remark #25015: Estimate of max trip count of loop=3
      LOOP END

      LOOP BEGIN at mmat-ikj.c(37,11)
      <Multiversioned v1>
         remark #25228: Loop multiversioned for Data Dependence
         remark #15388: vectorization support: reference C[i*cB+j] has aligned access   [ mmat-ikj.c(38,16) ]
         remark #15388: vectorization support: reference C[i*cB+j] has aligned access   [ mmat-ikj.c(38,16) ]
         remark #15388: vectorization support: reference B[k*cB+j] has aligned access   [ mmat-ikj.c(38,32) ]
         remark #15305: vectorization support: vector length 4
         remark #15399: vectorization support: unroll factor set to 2
         remark #15309: vectorization support: normalized vectorization overhead 1.062
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 2
         remark #15449: unmasked aligned unit stride stores: 1
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 10
         remark #15477: vector cost: 2.000
         remark #15478: estimated potential speedup: 4.620
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at mmat-ikj.c(37,11)
      <Alternate Alignment Vectorized Loop, Multiversioned v1>
      LOOP END

      LOOP BEGIN at mmat-ikj.c(37,11)
      <Remainder loop for vectorization, Multiversioned v1>
         remark #15388: vectorization support: reference C[i*cB+j] has aligned access   [ mmat-ikj.c(38,16) ]
         remark #15388: vectorization support: reference C[i*cB+j] has aligned access   [ mmat-ikj.c(38,16) ]
         remark #15389: vectorization support: reference B[k*cB+j] has unaligned access   [ mmat-ikj.c(38,32) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 1.067
         remark #15301: REMAINDER LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
      LOOP END

      LOOP BEGIN at mmat-ikj.c(37,11)
      <Remainder loop for vectorization, Multiversioned v1>
      LOOP END

      LOOP BEGIN at mmat-ikj.c(37,11)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         remark #25439: unrolled with remainder by 2
      LOOP END

      LOOP BEGIN at mmat-ikj.c(37,11)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: imprimeMat(float *, int, int, int)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at mmat-ikj.c(46,5)
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ mmat-ikj.c(48,9) ]
   remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ mmat-ikj.c(50,7) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between call:printf(const char *__restrict__, ...) (48:9) and call:printf(const char *__restrict__, ...) (50:7)
   remark #25015: Estimate of max trip count of loop=5

   LOOP BEGIN at mmat-ikj.c(47,7)
      remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ mmat-ikj.c(48,9) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #25015: Estimate of max trip count of loop=5
   LOOP END
LOOP END
===========================================================================
